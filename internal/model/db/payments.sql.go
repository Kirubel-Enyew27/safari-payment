// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"
	"time"

	"github.com/shopspring/decimal"
)

const getPaymentByCheckoutRequestID = `-- name: GetPaymentByCheckoutRequestID :one
SELECT id, checkout_request_id, merchant_request_id, phone_number, amount, mpesa_receipt, transaction_date, result_code, result_desc, created_at FROM payments
WHERE checkout_request_id = $1
`

func (q *Queries) GetPaymentByCheckoutRequestID(ctx context.Context, checkoutRequestID string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByCheckoutRequestID, checkoutRequestID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CheckoutRequestID,
		&i.MerchantRequestID,
		&i.PhoneNumber,
		&i.Amount,
		&i.MpesaReceipt,
		&i.TransactionDate,
		&i.ResultCode,
		&i.ResultDesc,
		&i.CreatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, checkout_request_id, merchant_request_id, phone_number, amount, mpesa_receipt, transaction_date, result_code, result_desc, created_at FROM payments
ORDER BY created_at DESC
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.CheckoutRequestID,
			&i.MerchantRequestID,
			&i.PhoneNumber,
			&i.Amount,
			&i.MpesaReceipt,
			&i.TransactionDate,
			&i.ResultCode,
			&i.ResultDesc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const savePayment = `-- name: SavePayment :one
INSERT INTO payments (
    checkout_request_id,
    merchant_request_id,
    phone_number,
    amount,
    mpesa_receipt,
    transaction_date,
    result_code,
    result_desc
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, checkout_request_id, merchant_request_id, phone_number, amount, mpesa_receipt, transaction_date, result_code, result_desc, created_at
`

type SavePaymentParams struct {
	CheckoutRequestID string
	MerchantRequestID string
	PhoneNumber       string
	Amount            decimal.Decimal
	MpesaReceipt      string
	TransactionDate   time.Time
	ResultCode        int32
	ResultDesc        string
}

func (q *Queries) SavePayment(ctx context.Context, arg SavePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, savePayment,
		arg.CheckoutRequestID,
		arg.MerchantRequestID,
		arg.PhoneNumber,
		arg.Amount,
		arg.MpesaReceipt,
		arg.TransactionDate,
		arg.ResultCode,
		arg.ResultDesc,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CheckoutRequestID,
		&i.MerchantRequestID,
		&i.PhoneNumber,
		&i.Amount,
		&i.MpesaReceipt,
		&i.TransactionDate,
		&i.ResultCode,
		&i.ResultDesc,
		&i.CreatedAt,
	)
	return i, err
}
